// Generated by gencpp from file propio/ProcessImageResponse.msg
// DO NOT EDIT!


#ifndef PROPIO_MESSAGE_PROCESSIMAGERESPONSE_H
#define PROPIO_MESSAGE_PROCESSIMAGERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>

namespace propio
{
template <class ContainerAllocator>
struct ProcessImageResponse_
{
  typedef ProcessImageResponse_<ContainerAllocator> Type;

  ProcessImageResponse_()
    : pose()
    , distance(0.0)
    , needsArm(false)
    , numberObjects(0)
    , dimensions()  {
    }
  ProcessImageResponse_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , distance(0.0)
    , needsArm(false)
    , numberObjects(0)
    , dimensions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _distance_type;
  _distance_type distance;

   typedef uint8_t _needsArm_type;
  _needsArm_type needsArm;

   typedef int32_t _numberObjects_type;
  _numberObjects_type numberObjects;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;





  typedef boost::shared_ptr< ::propio::ProcessImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::propio::ProcessImageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessImageResponse_

typedef ::propio::ProcessImageResponse_<std::allocator<void> > ProcessImageResponse;

typedef boost::shared_ptr< ::propio::ProcessImageResponse > ProcessImageResponsePtr;
typedef boost::shared_ptr< ::propio::ProcessImageResponse const> ProcessImageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::propio::ProcessImageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::propio::ProcessImageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::propio::ProcessImageResponse_<ContainerAllocator1> & lhs, const ::propio::ProcessImageResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.distance == rhs.distance &&
    lhs.needsArm == rhs.needsArm &&
    lhs.numberObjects == rhs.numberObjects &&
    lhs.dimensions == rhs.dimensions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::propio::ProcessImageResponse_<ContainerAllocator1> & lhs, const ::propio::ProcessImageResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace propio

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::propio::ProcessImageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::propio::ProcessImageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::propio::ProcessImageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::propio::ProcessImageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::propio::ProcessImageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::propio::ProcessImageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::propio::ProcessImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6360014842298dfa59757f88b3fec273";
  }

  static const char* value(const ::propio::ProcessImageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6360014842298dfaULL;
  static const uint64_t static_value2 = 0x59757f88b3fec273ULL;
};

template<class ContainerAllocator>
struct DataType< ::propio::ProcessImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "propio/ProcessImageResponse";
  }

  static const char* value(const ::propio::ProcessImageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::propio::ProcessImageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose\n"
"float64 distance\n"
"bool needsArm\n"
"int32 numberObjects\n"
"geometry_msgs/Vector3 dimensions \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::propio::ProcessImageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::propio::ProcessImageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.distance);
      stream.next(m.needsArm);
      stream.next(m.numberObjects);
      stream.next(m.dimensions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessImageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::propio::ProcessImageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::propio::ProcessImageResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "needsArm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.needsArm);
    s << indent << "numberObjects: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numberObjects);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROPIO_MESSAGE_PROCESSIMAGERESPONSE_H
