// Generated by gencpp from file propio/AttachDetachRequest.msg
// DO NOT EDIT!


#ifndef PROPIO_MESSAGE_ATTACHDETACHREQUEST_H
#define PROPIO_MESSAGE_ATTACHDETACHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace propio
{
template <class ContainerAllocator>
struct AttachDetachRequest_
{
  typedef AttachDetachRequest_<ContainerAllocator> Type;

  AttachDetachRequest_()
    : object_name()
    , attach(false)  {
    }
  AttachDetachRequest_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , attach(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_name_type;
  _object_name_type object_name;

   typedef uint8_t _attach_type;
  _attach_type attach;





  typedef boost::shared_ptr< ::propio::AttachDetachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::propio::AttachDetachRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AttachDetachRequest_

typedef ::propio::AttachDetachRequest_<std::allocator<void> > AttachDetachRequest;

typedef boost::shared_ptr< ::propio::AttachDetachRequest > AttachDetachRequestPtr;
typedef boost::shared_ptr< ::propio::AttachDetachRequest const> AttachDetachRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::propio::AttachDetachRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::propio::AttachDetachRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::propio::AttachDetachRequest_<ContainerAllocator1> & lhs, const ::propio::AttachDetachRequest_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.attach == rhs.attach;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::propio::AttachDetachRequest_<ContainerAllocator1> & lhs, const ::propio::AttachDetachRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace propio

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::propio::AttachDetachRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::propio::AttachDetachRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::propio::AttachDetachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::propio::AttachDetachRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::propio::AttachDetachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::propio::AttachDetachRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::propio::AttachDetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddf8e9385b72b362c71494321439b3d3";
  }

  static const char* value(const ::propio::AttachDetachRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddf8e9385b72b362ULL;
  static const uint64_t static_value2 = 0xc71494321439b3d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::propio::AttachDetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "propio/AttachDetachRequest";
  }

  static const char* value(const ::propio::AttachDetachRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::propio::AttachDetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_name\n"
"bool attach\n"
;
  }

  static const char* value(const ::propio::AttachDetachRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::propio::AttachDetachRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.attach);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttachDetachRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::propio::AttachDetachRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::propio::AttachDetachRequest_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_name);
    s << indent << "attach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.attach);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROPIO_MESSAGE_ATTACHDETACHREQUEST_H
