// Generated by gencpp from file robotnik_msgs/AudioPlayer.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_AUDIOPLAYER_H
#define ROBOTNIK_MSGS_MESSAGE_AUDIOPLAYER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct AudioPlayer_
{
  typedef AudioPlayer_<ContainerAllocator> Type;

  AudioPlayer_()
    : elapsed_time(0.0)
    , total_time(0.0)
    , name()
    , is_playing(false)  {
    }
  AudioPlayer_(const ContainerAllocator& _alloc)
    : elapsed_time(0.0)
    , total_time(0.0)
    , name(_alloc)
    , is_playing(false)  {
  (void)_alloc;
    }



   typedef float _elapsed_time_type;
  _elapsed_time_type elapsed_time;

   typedef float _total_time_type;
  _total_time_type total_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _is_playing_type;
  _is_playing_type is_playing;





  typedef boost::shared_ptr< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> const> ConstPtr;

}; // struct AudioPlayer_

typedef ::robotnik_msgs::AudioPlayer_<std::allocator<void> > AudioPlayer;

typedef boost::shared_ptr< ::robotnik_msgs::AudioPlayer > AudioPlayerPtr;
typedef boost::shared_ptr< ::robotnik_msgs::AudioPlayer const> AudioPlayerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::AudioPlayer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::AudioPlayer_<ContainerAllocator1> & lhs, const ::robotnik_msgs::AudioPlayer_<ContainerAllocator2> & rhs)
{
  return lhs.elapsed_time == rhs.elapsed_time &&
    lhs.total_time == rhs.total_time &&
    lhs.name == rhs.name &&
    lhs.is_playing == rhs.is_playing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::AudioPlayer_<ContainerAllocator1> & lhs, const ::robotnik_msgs::AudioPlayer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2121538143cf0a41ccf4c74bc5d25ca";
  }

  static const char* value(const ::robotnik_msgs::AudioPlayer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2121538143cf0a4ULL;
  static const uint64_t static_value2 = 0x1ccf4c74bc5d25caULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/AudioPlayer";
  }

  static const char* value(const ::robotnik_msgs::AudioPlayer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 elapsed_time\n"
"float32 total_time\n"
"string name\n"
"bool is_playing\n"
;
  }

  static const char* value(const ::robotnik_msgs::AudioPlayer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.elapsed_time);
      stream.next(m.total_time);
      stream.next(m.name);
      stream.next(m.is_playing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AudioPlayer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::AudioPlayer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::AudioPlayer_<ContainerAllocator>& v)
  {
    s << indent << "elapsed_time: ";
    Printer<float>::stream(s, indent + "  ", v.elapsed_time);
    s << indent << "total_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_time);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "is_playing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_playing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_AUDIOPLAYER_H
