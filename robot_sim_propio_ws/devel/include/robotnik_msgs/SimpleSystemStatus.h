// Generated by gencpp from file robotnik_msgs/SimpleSystemStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_SIMPLESYSTEMSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_SIMPLESYSTEMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robotnik_msgs
{
template <class ContainerAllocator>
struct SimpleSystemStatus_
{
  typedef SimpleSystemStatus_<ContainerAllocator> Type;

  SimpleSystemStatus_()
    : disk_capacity(0.0)
    , disk_usage(0.0)
    , memory_capacity(0.0)
    , memory_usage(0.0)
    , cpu_usage(0.0)
    , core_usage()
    , cpu_temperature(0.0)
    , core_temperatures()
    , header()  {
    }
  SimpleSystemStatus_(const ContainerAllocator& _alloc)
    : disk_capacity(0.0)
    , disk_usage(0.0)
    , memory_capacity(0.0)
    , memory_usage(0.0)
    , cpu_usage(0.0)
    , core_usage(_alloc)
    , cpu_temperature(0.0)
    , core_temperatures(_alloc)
    , header(_alloc)  {
  (void)_alloc;
    }



   typedef float _disk_capacity_type;
  _disk_capacity_type disk_capacity;

   typedef float _disk_usage_type;
  _disk_usage_type disk_usage;

   typedef float _memory_capacity_type;
  _memory_capacity_type memory_capacity;

   typedef float _memory_usage_type;
  _memory_usage_type memory_usage;

   typedef float _cpu_usage_type;
  _cpu_usage_type cpu_usage;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _core_usage_type;
  _core_usage_type core_usage;

   typedef float _cpu_temperature_type;
  _cpu_temperature_type cpu_temperature;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _core_temperatures_type;
  _core_temperatures_type core_temperatures;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleSystemStatus_

typedef ::robotnik_msgs::SimpleSystemStatus_<std::allocator<void> > SimpleSystemStatus;

typedef boost::shared_ptr< ::robotnik_msgs::SimpleSystemStatus > SimpleSystemStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::SimpleSystemStatus const> SimpleSystemStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator2> & rhs)
{
  return lhs.disk_capacity == rhs.disk_capacity &&
    lhs.disk_usage == rhs.disk_usage &&
    lhs.memory_capacity == rhs.memory_capacity &&
    lhs.memory_usage == rhs.memory_usage &&
    lhs.cpu_usage == rhs.cpu_usage &&
    lhs.core_usage == rhs.core_usage &&
    lhs.cpu_temperature == rhs.cpu_temperature &&
    lhs.core_temperatures == rhs.core_temperatures &&
    lhs.header == rhs.header;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "297c535b6bb09ddac9c89e40f3d56868";
  }

  static const char* value(const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x297c535b6bb09ddaULL;
  static const uint64_t static_value2 = 0xc9c89e40f3d56868ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/SimpleSystemStatus";
  }

  static const char* value(const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 disk_capacity\n"
"float32 disk_usage\n"
"float32 memory_capacity\n"
"float32 memory_usage\n"
"float32 cpu_usage\n"
"float32[] core_usage\n"
"float32 cpu_temperature\n"
"float32[] core_temperatures\n"
"Header header\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.disk_capacity);
      stream.next(m.disk_usage);
      stream.next(m.memory_capacity);
      stream.next(m.memory_usage);
      stream.next(m.cpu_usage);
      stream.next(m.core_usage);
      stream.next(m.cpu_temperature);
      stream.next(m.core_temperatures);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleSystemStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::SimpleSystemStatus_<ContainerAllocator>& v)
  {
    s << indent << "disk_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.disk_capacity);
    s << indent << "disk_usage: ";
    Printer<float>::stream(s, indent + "  ", v.disk_usage);
    s << indent << "memory_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.memory_capacity);
    s << indent << "memory_usage: ";
    Printer<float>::stream(s, indent + "  ", v.memory_usage);
    s << indent << "cpu_usage: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_usage);
    s << indent << "core_usage[]" << std::endl;
    for (size_t i = 0; i < v.core_usage.size(); ++i)
    {
      s << indent << "  core_usage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.core_usage[i]);
    }
    s << indent << "cpu_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_temperature);
    s << indent << "core_temperatures[]" << std::endl;
    for (size_t i = 0; i < v.core_temperatures.size(); ++i)
    {
      s << indent << "  core_temperatures[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.core_temperatures[i]);
    }
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_SIMPLESYSTEMSTATUS_H
