// Generated by gencpp from file boeing_gazebo_model_attachment_plugin/DetachRequest.msg
// DO NOT EDIT!


#ifndef BOEING_GAZEBO_MODEL_ATTACHMENT_PLUGIN_MESSAGE_DETACHREQUEST_H
#define BOEING_GAZEBO_MODEL_ATTACHMENT_PLUGIN_MESSAGE_DETACHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace boeing_gazebo_model_attachment_plugin
{
template <class ContainerAllocator>
struct DetachRequest_
{
  typedef DetachRequest_<ContainerAllocator> Type;

  DetachRequest_()
    : joint_name()
    , model_name_1()
    , model_name_2()  {
    }
  DetachRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , model_name_1(_alloc)
    , model_name_2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joint_name_type;
  _joint_name_type joint_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_name_1_type;
  _model_name_1_type model_name_1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_name_2_type;
  _model_name_2_type model_name_2;





  typedef boost::shared_ptr< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DetachRequest_

typedef ::boeing_gazebo_model_attachment_plugin::DetachRequest_<std::allocator<void> > DetachRequest;

typedef boost::shared_ptr< ::boeing_gazebo_model_attachment_plugin::DetachRequest > DetachRequestPtr;
typedef boost::shared_ptr< ::boeing_gazebo_model_attachment_plugin::DetachRequest const> DetachRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator1> & lhs, const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.model_name_1 == rhs.model_name_1 &&
    lhs.model_name_2 == rhs.model_name_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator1> & lhs, const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace boeing_gazebo_model_attachment_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11ada2739d4d4a28b54f2b6269ce953b";
  }

  static const char* value(const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11ada2739d4d4a28ULL;
  static const uint64_t static_value2 = 0xb54f2b6269ce953bULL;
};

template<class ContainerAllocator>
struct DataType< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "boeing_gazebo_model_attachment_plugin/DetachRequest";
  }

  static const char* value(const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"string model_name_1\n"
"string model_name_2\n"
;
  }

  static const char* value(const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.model_name_1);
      stream.next(m.model_name_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetachRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::boeing_gazebo_model_attachment_plugin::DetachRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name);
    s << indent << "model_name_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_name_1);
    s << indent << "model_name_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_name_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOEING_GAZEBO_MODEL_ATTACHMENT_PLUGIN_MESSAGE_DETACHREQUEST_H
