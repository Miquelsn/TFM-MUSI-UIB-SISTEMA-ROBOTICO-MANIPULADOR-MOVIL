# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotnik_msgs/SimpleSystemStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SimpleSystemStatus(genpy.Message):
  _md5sum = "297c535b6bb09ddac9c89e40f3d56868"
  _type = "robotnik_msgs/SimpleSystemStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 disk_capacity
float32 disk_usage
float32 memory_capacity
float32 memory_usage
float32 cpu_usage
float32[] core_usage
float32 cpu_temperature
float32[] core_temperatures
Header header
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['disk_capacity','disk_usage','memory_capacity','memory_usage','cpu_usage','core_usage','cpu_temperature','core_temperatures','header']
  _slot_types = ['float32','float32','float32','float32','float32','float32[]','float32','float32[]','std_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       disk_capacity,disk_usage,memory_capacity,memory_usage,cpu_usage,core_usage,cpu_temperature,core_temperatures,header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleSystemStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.disk_capacity is None:
        self.disk_capacity = 0.
      if self.disk_usage is None:
        self.disk_usage = 0.
      if self.memory_capacity is None:
        self.memory_capacity = 0.
      if self.memory_usage is None:
        self.memory_usage = 0.
      if self.cpu_usage is None:
        self.cpu_usage = 0.
      if self.core_usage is None:
        self.core_usage = []
      if self.cpu_temperature is None:
        self.cpu_temperature = 0.
      if self.core_temperatures is None:
        self.core_temperatures = []
      if self.header is None:
        self.header = std_msgs.msg.Header()
    else:
      self.disk_capacity = 0.
      self.disk_usage = 0.
      self.memory_capacity = 0.
      self.memory_usage = 0.
      self.cpu_usage = 0.
      self.core_usage = []
      self.cpu_temperature = 0.
      self.core_temperatures = []
      self.header = std_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.disk_capacity, _x.disk_usage, _x.memory_capacity, _x.memory_usage, _x.cpu_usage))
      length = len(self.core_usage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.core_usage))
      _x = self.cpu_temperature
      buff.write(_get_struct_f().pack(_x))
      length = len(self.core_temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.core_temperatures))
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.disk_capacity, _x.disk_usage, _x.memory_capacity, _x.memory_usage, _x.cpu_usage,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.core_usage = s.unpack(str[start:end])
      start = end
      end += 4
      (self.cpu_temperature,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.core_temperatures = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.disk_capacity, _x.disk_usage, _x.memory_capacity, _x.memory_usage, _x.cpu_usage))
      length = len(self.core_usage)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.core_usage.tostring())
      _x = self.cpu_temperature
      buff.write(_get_struct_f().pack(_x))
      length = len(self.core_temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.core_temperatures.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.disk_capacity, _x.disk_usage, _x.memory_capacity, _x.memory_usage, _x.cpu_usage,) = _get_struct_5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.core_usage = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.cpu_temperature,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.core_temperatures = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
